-- MySQL Script generated by MySQL Workbench
-- Fri Jul 25 22:39:05 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema LittleLemonDB
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema LittleLemonDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `LittleLemonDB` DEFAULT CHARACTER SET utf8 ;
USE `LittleLemonDB` ;

-- -----------------------------------------------------
-- Table `LittleLemonDB`.`CustomerDetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`CustomerDetails` (
  `CustomerId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(45) NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `Phone` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(150) NULL,
  PRIMARY KEY (`CustomerId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`StaffRoles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`StaffRoles` (
  `RoleId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`RoleId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`StaffInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`StaffInfo` (
  `StaffId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Full Name` VARCHAR(150) NOT NULL,
  `Salary` DECIMAL NOT NULL,
  `RoleId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`StaffId`),
  CONSTRAINT `StaffRole_FK`
    FOREIGN KEY (`RoleId`)
    REFERENCES `LittleLemonDB`.`StaffRoles` (`RoleId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `StaffRole_FK_idx` ON `LittleLemonDB`.`StaffInfo` (`RoleId` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Bookings`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Bookings` (
  `BookingId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `BookingDate` DATE NOT NULL,
  `TableNumber` INT NOT NULL,
  `CustomerId` INT UNSIGNED NOT NULL,
  `StaffId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`BookingId`),
  CONSTRAINT `CustomerId`
    FOREIGN KEY (`CustomerId`)
    REFERENCES `LittleLemonDB`.`CustomerDetails` (`CustomerId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `StaffId`
    FOREIGN KEY (`StaffId`)
    REFERENCES `LittleLemonDB`.`StaffInfo` (`StaffId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `CustomerId_idx` ON `LittleLemonDB`.`Bookings` (`CustomerId` ASC) VISIBLE;

CREATE INDEX `StaffId_idx` ON `LittleLemonDB`.`Bookings` (`StaffId` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`MenuItems`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`MenuItems` (
  `MenuItemsId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `CourseName` VARCHAR(45) NOT NULL,
  `StarterName` VARCHAR(45) NOT NULL,
  `DessertName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`MenuItemsId`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Menu`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Menu` (
  `MenuId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `MenuName` VARCHAR(45) NOT NULL,
  `Cuisine` VARCHAR(45) NOT NULL,
  `MenuItemsId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`MenuId`),
  CONSTRAINT `MenuItemId`
    FOREIGN KEY (`MenuItemsId`)
    REFERENCES `LittleLemonDB`.`MenuItems` (`MenuItemsId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `MenuItemId_idx` ON `LittleLemonDB`.`Menu` (`MenuItemsId` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`Orders` (
  `OrderId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `OrderDate` DATE NOT NULL,
  `Quantity` INT NOT NULL,
  `TotalCost` DECIMAL NOT NULL,
  `CustomerId` INT UNSIGNED NOT NULL,
  `MenuId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`OrderId`),
  CONSTRAINT `CustomerOrderId_FK`
    FOREIGN KEY (`CustomerId`)
    REFERENCES `LittleLemonDB`.`CustomerDetails` (`CustomerId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `MenuOrder_FK`
    FOREIGN KEY (`MenuId`)
    REFERENCES `LittleLemonDB`.`Menu` (`MenuId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `CustomerOrderId_FK_idx` ON `LittleLemonDB`.`Orders` (`CustomerId` ASC) VISIBLE;

CREATE INDEX `MenuOrder_FK_idx` ON `LittleLemonDB`.`Orders` (`MenuId` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `LittleLemonDB`.`OrderDeliveryStatus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `LittleLemonDB`.`OrderDeliveryStatus` (
  `StatusId` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `DeliveryDate` DATE NOT NULL,
  `Status` VARCHAR(45) NOT NULL,
  `OrderId` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`StatusId`),
  CONSTRAINT `OrderDeliveryId`
    FOREIGN KEY (`OrderId`)
    REFERENCES `LittleLemonDB`.`Orders` (`OrderId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `OrderDeliveryId_idx` ON `LittleLemonDB`.`OrderDeliveryStatus` (`OrderId` ASC) VISIBLE;

CREATE VIEW `ordersview` AS 
select 
`orders`.`OrderId` AS `OrderID`,
`orders`.`Quantity` AS `Quantity`,
`orders`.`TotalCost` AS `TotalCost` 
from `orders` 
where (`orders`.`Quantity` > 2);

CREATE VIEW `task2_ordersover150` AS 
select 
`customerdetails`.`CustomerId` AS `CustomerID`,
concat(`customerdetails`.`FirstName`,' ',`customerdetails`.`LastName`) AS `Full Name`,
`orders`.`OrderId` AS `OrderId`,
`orders`.`TotalCost` AS `Cost`,
`menu`.`MenuName` AS `MenuName`,
`menuitems`.`CourseName` AS `CourseName`,
`menuitems`.`StarterName` AS `StarterName` 
from `orders` 
left join `customerdetails` on `orders`.`CustomerId` = `customerdetails`.`CustomerId` 
left join `menu` on `orders`.`MenuId` = `menu`.`MenuId` 
left join `menuitems` on `menu`.`MenuItemsId` = `menuitems`.`MenuItemsId` 
where `orders`.`TotalCost` > 150 
order by `orders`.`TotalCost`;

CREATE VIEW `task3_menusover2` AS 
SELECT `menu`.`MenuName` AS `MenuName` 
FROM `menu` 
WHERE `menu`.`MenuId` = ANY (select `orders`.`MenuId` from `orders` where `orders`.`Quantity` > 2);

DELIMITER ;;
CREATE PROCEDURE `GetMaxQuantity`()
BEGIN
SELECT MAX(Quantity) AS 'Max Quantity in Order' FROM Orders;
END ;;
DELIMITER ;

PREPARE GetOrderDetail FROM 'SELECT OrderId, Quantity, TotalCost AS Cost FROM Orders WHERE CustomerId = ?';

DELIMITER ;;
CREATE PROCEDURE `CancelOrder`(order_id INT)
BEGIN
DELETE FROM Orders WHERE OrderId = order_id;
SELECT CONCAT('Order ', order_id, ' is cancelled') AS 'Confirmation';
END ;;
DELIMITER ;

ALTER TABLE `LittleLemonDB`.`Bookings` 
DROP FOREIGN KEY `StaffId`;
ALTER TABLE `LittleLemonDB`.`Bookings` 
DROP COLUMN `StaffId`,
DROP INDEX `StaffId_idx` ;
;

INSERT INTO LittleLemonDB.Bookings (BookingId, BookingDate, TableNumber, CustomerId)
VALUES 
(1, '2022-10-10', 5, 1),
(2, '2022-10-12', 3, 3),
(3, '2022-10-11', 2, 2),
(4, '2022-10-13', 2, 1);

DELIMITER ;;
CREATE PROCEDURE LittleLemonDB.`CheckBooking`(booking_date DATE, table_number INT)
BEGIN
SELECT 
CASE 
WHEN COUNT(BookingId) > 0 THEN CONCAT('Table ', table_number, ' is already booked')
ELSE CONCAT('Table ', table_number, ' is available')
END AS `Booking status` 
FROM Bookings 
WHERE BookingDate = booking_date AND TableNumber = table_number;
END ;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE LittleLemonDB.`AddValidBooking`(booking_date DATE, table_number INT, customer_id INT)
BEGIN
DECLARE booking_id INT;
START TRANSACTION;
INSERT INTO Bookings (BookingDate, TableNumber, CustomerId) 
VALUES (booking_date, table_number, customer_id);
IF (SELECT COUNT(BookingId) FROM Bookings WHERE BookingDate = booking_date AND TableNumber = table_number) > 1 THEN
ROLLBACK;
SELECT CONCAT('Table ', table_number, ' is already booked - booking cancelled') AS `Booking status`;
ELSE 
COMMIT;
SELECT CONCAT('Table ', table_number, ' is booked successfully') AS `Booking status`;
END IF;
END;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE LittleLemonDB.`AddBooking`(booking_id INT, customer_id INT, booking_date DATE, table_number INT)
BEGIN
INSERT INTO Bookings (BookingId, BookingDate, TableNumber, CustomerId) 
VALUES (booking_id, booking_date, table_number, customer_id);
SELECT 'New booking added' AS `Confirmation`;
END;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE LittleLemonDB.`UpdateBooking`(booking_id INT, booking_date DATE)
BEGIN
UPDATE Bookings 
SET BookingDate = booking_date 
WHERE BookingId = booking_id;
SELECT CONCAT('Booking ', booking_id, ' updated') AS `Confirmation`;
END;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE LittleLemonDB.`CancelBooking`(booking_id INT)
BEGIN
DELETE FROM Bookings 
WHERE BookingId = booking_id;
SELECT CONCAT('Booking ', booking_id, ' cancelled') AS `Confirmation`;
END;;
DELIMITER ;



SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
